with Ada.Text_IO; use Ada.Text_IO;
with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;
with CustomTyps; use CustomTyps;
with Util;
with IOPublicKey; use IOPublicKey;
with operations; use operations;
with Ada.Strings; use Ada.Strings;
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
with Ada.Text_IO.Unbounded_Io; use Ada.Text_IO.Unbounded_IO;
with Ada.Calendar; use Ada.Calendar;
with Ada.Calendar.Formatting; use Ada.Calendar.Formatting;
procedure Main is

--------------------------------------------------------------------------------------------------------------------------Useful stuff box
-- Checks if a file already exsists to avoid overwriting
-- if Exists (filename) = True then
--  Create (F, Out_File, filename);

   -- How to get a filename for encryption and add the bin part and remove it
   --   Get_Line(Filename);
   --  Append(Filename,".bin");
   --  Filename := Head(Filename, Length(Filename) - 4);
--------------------------------------------------------------------------------------------------------------------------
   Inp : Integer;
   PublicKey_A : Pub_Array := (others => 0);
   PublicKey_B : Pub_Array := (others => 0);
   SecretKey : Sec := 0;
   Filename : Unbounded_String := To_Unbounded_String("");
   TS : Time;
   TE : Time;

   procedure Display_Help is
   begin
      Put_Line("This programm allows the usage of a specified asymmetric cryptosystem for testing purposes in this case LWE according to Regev");
      Put_Line("[1] Encrypt - Allows to encrypt file with either a public or private Key | Keys can be given on demand or stored within the programm ");
      Put_Line("[2] Decrypt - Allows to decrypt file | Keys can be given on demand or stored within the programm");
      Put_Line("[3] Generate Keys - Generates a Public key pair which will be  stored within the run directory of this programm | also will be set to Session Keys");
      Put_Line("[4] Read Public Key - Stores a public key within the programm | only keys generated with this programm are valid | only one key can be stored at one time | Observe Naming convention PKA.bin / PKB.bin");
      Put_Line("[5] Help - Displays this message");
      Put_Line("[9] Exit - Terminates the application");
      Put_Line("When inserting Filenames the programm always starts from the run directory and requieres the full name with extension");
      Put_Line("Keys can be generated and Stored or given via the read function put remember if you lose your key you lose your data");
      Put_Line("For detailed information please view my bachelor thesis");
      Put_Line("Tom Marinovic");
   end Display_Help;

   -- Calls all requierd functions to generate a vaild public key pair | the secret key should be a vector generated by seed password and used in the creation of V
   procedure KeyGen is
   begin
      Put_Line("Please Enter a Secret Key as an integer between 0 and 32000");
      Get(Inp);
      SecretKey := Util.GenSecretKey(Inp);
      PublicKey_A := Util.GenRandomPub;
      PublicKey_B := GenB(PublicKey_A, SecretKey, Util.GenRandomError);
      WritePK(PublicKey_A,  PublicKey_B);
      Put_Line("Your Public Key has been generated and stored in the programm and as files");


   end KeyGen;

   procedure ReadPrimayKey is
   begin
      if (Util.FileExist(PKA_FILE) and Util.FileExist(PKB_FILE)) = True then
         PublicKey_A := ReadPK(PKA_FILE);
         PublicKey_B := ReadPK(PKB_FILE);
         Put_Line("Public Key has been set");
      else
         Put_Line("No Public Key has been generated yet or its not in the run directonary of the executable");
      end if;
   end ReadPrimayKey;

   -- Calls encryption function
   procedure Enc is
   begin
      Put_Line("Please give a filename to be encrypted (use the full name with extension example: test.docx)");
      -- requiered since get dosent consume a newline
      Skip_Line;
      Get_Line(Filename);
      if Util.FileExist(To_String(Filename)) = True then
         null;
      else
         Put_Line ("File not Found do you want to retry? Yes = [1] No = [9]");
         Get(Inp);
         if Inp = 1 then
            Enc;
            -- Needed since on succesful completion of the restarted process ada will drop in back in "wrong" one. It's not terminated on leaving just halted
            return;
         else
            return;
         end if;
      end if;
      Put_Line("Do you wish to use the stored public key [1] or generate a new pair for this encryption [9] ?");
      Get(Inp);
      if Inp = 1 then
         null;
      else
         KeyGen;
      end if;
      TS := Clock;
      Encrypt(PublicKey_A, PublicKey_B, Filename);
      TE := Clock;
      Put_Line(Image(TE - TS,True));
      Put_Line("Encryption complete the encypted file has been stored as " & Filename & ".bin in the run directonary of the application");
   end Enc;

   -- calls decryption function
   procedure Dec is

   begin
      Put_Line("Please give a filename to be decrypted (use the full name with extension example: test.docx.bin)");
      -- requiered since get dosent consume a newline
      Skip_Line;
      Get_Line(Filename);
      if Util.FileExist(To_String(Filename)) = True then
         null;
      else
        Put_Line ("File not Found do you want to retry? Yes = [1] No = [9]");
         Get(Inp);
         if Inp = 1 then
            Dec;
            return;
         else
            return;
         end if;
      end if;
      Put_Line("Enter the Secretkey");
      Get(Inp);
      SecretKey := Util.GenSecretKey(Inp);
      Decrypt(Filename, SecretKey);
      Filename := Head(Filename, Length(Filename) - 4);
      Put_Line("The file has been decrypted and stored as " & Filename & " in the run directonary of the application");
   end Dec;

begin
   -- Primary Interface loop not elegant but works

   loop
      Put_Line ("Please choose a option [1] Encrypt [2] Decrypt [3] Generate keys [4] Read public key [5] Help [9] Exit");
      Get (Inp);
      case Inp is
         when 1 =>
            Enc;
         when 2 =>
            Dec;
         when 3 =>
            KeyGen;
         when 4 =>
            ReadPrimayKey;
         when 5 =>
            Display_Help;
         when 9 =>
            Put_Line("Good Bye, Have a great day");
            exit;
            when others =>
            Put_Line ("Choose a vaild option");
            Display_Help;

      end case;
   end loop;



end Main;
